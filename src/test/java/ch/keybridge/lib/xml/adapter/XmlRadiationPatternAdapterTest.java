/*
 * Copyright 2017 Key Bridge. All rights reserved.
 * Use is subject to license terms.
 *
 * Software Code is protected by Copyrights. Author hereby reserves all rights
 * in and to Copyrights and no license is granted under Copyrights in this
 * Software License Agreement.
 *
 * Key Bridge generally licenses Copyrights for commercialization pursuant to
 * the terms of either a Standard Software Source Code License Agreement or a
 * Standard Product License Agreement. A copy of either Agreement can be
 * obtained upon request from: info@keybridgewireless.com
 */
package ch.keybridge.lib.xml.adapter;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

/**
 *
 * @author Key Bridge LLC
 */
public class XmlRadiationPatternAdapterTest {

  public XmlRadiationPatternAdapterTest() {
  }

  @Test
  public void testUnMarshal() throws Exception {
    System.out.println("Test XmlRadiationPatternAdapter UnMarshal");

    String v = "PATTERN ((0 4.1172), (1 4.0609), (2 3.9917), (3 3.9225), (4 3.8532), (5 3.784), (6 3.7148), (7 3.6456), (8 3.5763), (9 3.5071), (10 3.4379), (11 3.3687), (12 3.2994), (13 3.232), (14 3.1653), (15 3.0986), (16 3.0319), (17 2.9652), (18 2.8984), (19 2.8317), (20 2.765), (21 2.6983), (22 2.6316), (23 2.5649), (24 2.4993), (25 2.4361), (26 2.3729), (27 2.3097), (28 2.2465), (29 2.1833), (30 2.1201), (31 2.0568), (32 1.9936), (33 1.9305), (34 1.8703), (35 1.8101), (36 1.7499), (37 1.6897), (38 1.6295), (39 1.5693), (40 1.5091), (41 1.4489), (42 1.3922), (43 1.3398), (44 1.2874), (45 1.235), (46 1.1826), (47 1.1302), (48 1.0778), (49 1.0255), (50 0.9731), (51 0.928), (52 0.8914), (53 0.8547), (54 0.8181), (55 0.7814), (56 0.7448), (57 0.7081), (58 0.6714), (59 0.6348), (60 0.5982), (61 0.566), (62 0.5338), (63 0.5016), (64 0.4694), (65 0.4372), (66 0.4051), (67 0.3729), (68 0.3407), (69 0.3153), (70 0.2958), (71 0.2763), (72 0.2569), (73 0.2374), (74 0.2179), (75 0.1984), (76 0.179), (77 0.1623), (78 0.1516), (79 0.1408), (80 0.1301), (81 0.1194), (82 0.1087), (83 0.0979), (84 0.0872), (85 0.0789), (86 0.0711), (87 0.0633), (88 0.0556), (89 0.0478), (90 0.04), (91 0.0322), (92 0.0244), (93 0.0166), (94 0.0088), (95 0.001), (96 0.006), (97 0.0129), (98 0.0198), (99 0.0267), (100 0.0336), (101 0.0406), (102 0.0475), (103 0.0544), (104 0.0613), (105 0.0682), (106 0.0751), (107 0.082), (108 0.0889), (109 0.1053), (110 0.1253), (111 0.1454), (112 0.1654), (113 0.1855), (114 0.2055), (115 0.2256), (116 0.2456), (117 0.2657), (118 0.2857), (119 0.3058), (120 0.3298), (121 0.3606), (122 0.3915), (123 0.4223), (124 0.4532), (125 0.484), (126 0.5149), (127 0.5457), (128 0.5766), (129 0.6074), (130 0.6418), (131 0.6805), (132 0.7193), (133 0.7581), (134 0.7968), (135 0.8356), (136 0.8744), (137 0.9131), (138 0.9519), (139 0.9907), (140 1.0294), (141 1.0682), (142 1.1157), (143 1.172), (144 1.2283), (145 1.2846), (146 1.3409), (147 1.3972), (148 1.4535), (149 1.5098), (150 1.5661), (151 1.6224), (152 1.6826), (153 1.7432), (154 1.8038), (155 1.8645), (156 1.9251), (157 1.9857), (158 2.0463), (159 2.1069), (160 2.1675), (161 2.2281), (162 2.2893), (163 2.3571), (164 2.4249), (165 2.4927), (166 2.5605), (167 2.6283), (168 2.6961), (169 2.7638), (170 2.8316), (171 2.9026), (172 2.9748), (173 3.047), (174 3.1193), (175 3.1915), (176 3.2637), (177 3.336), (178 3.4082), (179 3.4804), (180 3.5491), (181 3.6173), (182 3.6856), (183 3.7538), (184 3.8221), (185 3.8903), (186 3.9586), (187 4.0268), (188 4.0951), (189 4.1633), (190 4.2316), (191 4.2956), (192 4.3563), (193 4.4169), (194 4.4775), (195 4.5382), (196 4.5988), (197 4.6594), (198 4.7201), (199 4.7807), (200 4.8323), (201 4.8764), (202 4.9205), (203 4.9646), (204 5.0087), (205 5.0528), (206 5.0969), (207 5.141), (208 5.1701), (209 5.1943), (210 5.2185), (211 5.2426), (212 5.2668), (213 5.291), (214 5.3152), (215 5.3394), (216 5.3636), (217 5.3878), (218 5.412), (219 5.4362), (220 5.4603), (221 5.4845), (222 5.4758), (223 5.4576), (224 5.4394), (225 5.4143), (226 5.361), (227 5.3077), (228 5.2545), (229 5.2012), (230 5.1491), (231 5.0975), (232 5.046), (233 4.9944), (234 4.9428), (235 4.8913), (236 4.8465), (237 4.8041), (238 4.7618), (239 4.7194), (240 4.677), (241 4.6346), (242 4.5922), (243 4.5499), (244 4.5092), (245 4.4808), (246 4.4524), (247 4.424), (248 4.3956), (249 4.3672), (250 4.3388), (251 4.3104), (252 4.2901), (253 4.2752), (254 4.2603), (255 4.2454), (256 4.2305), (257 4.2156), (258 4.2007), (259 4.1858), (260 4.1728), (261 4.1614), (262 4.15), (263 4.1386), (264 4.1272), (265 4.1158), (266 4.1044), (267 4.093), (268 4.0866), (269 4.0825), (270 4.0783), (271 4.0742), (272 4.0701), (273 4.0659), (274 4.0618), (275 4.0577), (276 4.041), (277 4.0496), (278 4.0581), (279 4.0666), (280 4.0751), (281 4.0837), (282 4.0922), (283 4.1007), (284 4.1093), (285 4.1178), (286 4.1263), (287 4.1349), (288 4.1499), (289 4.1669), (290 4.1838), (291 4.2007), (292 4.2177), (293 4.2346), (294 4.2516), (295 4.2685), (296 4.2854), (297 4.3024), (298 4.3314), (299 4.3684), (300 4.4054), (301 4.4424), (302 4.4794), (303 4.5164), (304 4.5534), (305 4.5904), (306 4.6273), (307 4.6654), (308 4.7108), (309 4.7563), (310 4.8018), (311 4.8472), (312 4.8927), (313 4.9381), (314 4.9836), (315 5.0291), (316 5.0745), (317 5.12), (318 5.1667), (319 5.2164), (320 5.266), (321 5.3156), (322 5.3636), (323 5.4013), (324 5.439), (325 5.4752), (326 5.4763), (327 5.4774), (328 5.4784), (329 5.4795), (330 5.467), (331 5.4367), (332 5.4065), (333 5.3763), (334 5.3461), (335 5.3159), (336 5.2856), (337 5.2554), (338 5.2252), (339 5.1891), (340 5.1419), (341 5.0948), (342 5.0476), (343 5.0004), (344 4.9532), (345 4.906), (346 4.8588), (347 4.8117), (348 4.7645), (349 4.7173), (350 4.6701), (351 4.6172), (352 4.5616), (353 4.5061), (354 4.4505), (355 4.3949), (356 4.3394), (357 4.2838), (358 4.2283), (359 4.1727))";
    XmlRadiationPatternAdapter adapter = new XmlRadiationPatternAdapter();
    Map<Double, Double> pattern = adapter.unmarshal(v);
//    System.out.println("Text    " + v);
//    System.out.println("Map     " + pattern);
    String text = adapter.marshal(pattern);
//    System.out.println("Text    " + text);

    Assert.assertEquals(text, v);
  }

  @Test
  public void testMarshal() throws Exception {
    System.out.println("Test XmlRadiationPatternAdapter Marshal");
    String v = "PATTERN ((0 -4.1172), (1 -4.0609), (2 -3.9917), (3 -3.9225), (4 -3.8532), (5 -3.784), (6 -3.7148), (7 -3.6456), (8 -3.5763), (9 -3.5071), (10 -3.4379), (11 -3.3687), (12 -3.2994), (13 -3.232), (14 -3.1653), (15 -3.0986), (16 -3.0319), (17 -2.9652), (18 -2.8984), (19 -2.8317), (20 -2.765), (21 -2.6983), (22 -2.6316), (23 -2.5649), (24 -2.4993), (25 -2.4361), (26 -2.3729), (27 -2.3097), (28 -2.2465), (29 -2.1833), (30 -2.1201), (31 -2.0568), (32 -1.9936), (33 -1.9305), (34 -1.8703), (35 -1.8101), (36 -1.7499), (37 -1.6897), (38 -1.6295), (39 -1.5693), (40 -1.5091), (41 -1.4489), (42 -1.3922), (43 -1.3398), (44 -1.2874), (45 -1.235), (46 -1.1826), (47 -1.1302), (48 -1.0778), (49 -1.0255), (50 -0.9731), (51 -0.928), (52 -0.8914), (53 -0.8547), (54 -0.8181), (55 -0.7814), (56 -0.7448), (57 -0.7081), (58 -0.6714), (59 -0.6348), (60 -0.5982), (61 -0.566), (62 -0.5338), (63 -0.5016), (64 -0.4694), (65 -0.4372), (66 -0.4051), (67 -0.3729), (68 -0.3407), (69 -0.3153), (70 -0.2958), (71 -0.2763), (72 -0.2569), (73 -0.2374), (74 -0.2179), (75 -0.1984), (76 -0.179), (77 -0.1623), (78 -0.1516), (79 -0.1408), (80 -0.1301), (81 -0.1194), (82 -0.1087), (83 -0.0979), (84 -0.0872), (85 -0.0789), (86 -0.0711), (87 -0.0633), (88 -0.0556), (89 -0.0478), (90 -0.04), (91 -0.0322), (92 -0.0244), (93 -0.0166), (94 -0.0088), (95 -0.001), (96 -0.006), (97 -0.0129), (98 -0.0198), (99 -0.0267), (100 -0.0336), (101 -0.0406), (102 -0.0475), (103 -0.0544), (104 -0.0613), (105 -0.0682), (106 -0.0751), (107 -0.082), (108 -0.0889), (109 -0.1053), (110 -0.1253), (111 -0.1454), (112 -0.1654), (113 -0.1855), (114 -0.2055), (115 -0.2256), (116 -0.2456), (117 -0.2657), (118 -0.2857), (119 -0.3058), (120 -0.3298), (121 -0.3606), (122 -0.3915), (123 -0.4223), (124 -0.4532), (125 -0.484), (126 -0.5149), (127 -0.5457), (128 -0.5766), (129 -0.6074), (130 -0.6418), (131 -0.6805), (132 -0.7193), (133 -0.7581), (134 -0.7968), (135 -0.8356), (136 -0.8744), (137 -0.9131), (138 -0.9519), (139 -0.9907), (140 -1.0294), (141 -1.0682), (142 -1.1157), (143 -1.172), (144 -1.2283), (145 -1.2846), (146 -1.3409), (147 -1.3972), (148 -1.4535), (149 -1.5098), (150 -1.5661), (151 -1.6224), (152 -1.6826), (153 -1.7432), (154 -1.8038), (155 -1.8645), (156 -1.9251), (157 -1.9857), (158 -2.0463), (159 -2.1069), (160 -2.1675), (161 -2.2281), (162 -2.2893), (163 -2.3571), (164 -2.4249), (165 -2.4927), (166 -2.5605), (167 -2.6283), (168 -2.6961), (169 -2.7638), (170 -2.8316), (171 -2.9026), (172 -2.9748), (173 -3.047), (174 -3.1193), (175 -3.1915), (176 -3.2637), (177 -3.336), (178 -3.4082), (179 -3.4804), (180 -3.5491), (181 -3.6173), (182 -3.6856), (183 -3.7538), (184 -3.8221), (185 -3.8903), (186 -3.9586), (187 -4.0268), (188 -4.0951), (189 -4.1633), (190 -4.2316), (191 -4.2956), (192 -4.3563), (193 -4.4169), (194 -4.4775), (195 -4.5382), (196 -4.5988), (197 -4.6594), (198 -4.7201), (199 -4.7807), (200 -4.8323), (201 -4.8764), (202 -4.9205), (203 -4.9646), (204 -5.0087), (205 -5.0528), (206 -5.0969), (207 -5.141), (208 -5.1701), (209 -5.1943), (210 -5.2185), (211 -5.2426), (212 -5.2668), (213 -5.291), (214 -5.3152), (215 -5.3394), (216 -5.3636), (217 -5.3878), (218 -5.412), (219 -5.4362), (220 -5.4603), (221 -5.4845), (222 -5.4758), (223 -5.4576), (224 -5.4394), (225 -5.4143), (226 -5.361), (227 -5.3077), (228 -5.2545), (229 -5.2012), (230 -5.1491), (231 -5.0975), (232 -5.046), (233 -4.9944), (234 -4.9428), (235 -4.8913), (236 -4.8465), (237 -4.8041), (238 -4.7618), (239 -4.7194), (240 -4.677), (241 -4.6346), (242 -4.5922), (243 -4.5499), (244 -4.5092), (245 -4.4808), (246 -4.4524), (247 -4.424), (248 -4.3956), (249 -4.3672), (250 -4.3388), (251 -4.3104), (252 -4.2901), (253 -4.2752), (254 -4.2603), (255 -4.2454), (256 -4.2305), (257 -4.2156), (258 -4.2007), (259 -4.1858), (260 -4.1728), (261 -4.1614), (262 -4.15), (263 -4.1386), (264 -4.1272), (265 -4.1158), (266 -4.1044), (267 -4.093), (268 -4.0866), (269 -4.0825), (270 -4.0783), (271 -4.0742), (272 -4.0701), (273 -4.0659), (274 -4.0618), (275 -4.0577), (276 -4.041), (277 -4.0496), (278 -4.0581), (279 -4.0666), (280 -4.0751), (281 -4.0837), (282 -4.0922), (283 -4.1007), (284 -4.1093), (285 -4.1178), (286 -4.1263), (287 -4.1349), (288 -4.1499), (289 -4.1669), (290 -4.1838), (291 -4.2007), (292 -4.2177), (293 -4.2346), (294 -4.2516), (295 -4.2685), (296 -4.2854), (297 -4.3024), (298 -4.3314), (299 -4.3684), (300 -4.4054), (301 -4.4424), (302 -4.4794), (303 -4.5164), (304 -4.5534), (305 -4.5904), (306 -4.6273), (307 -4.6654), (308 -4.7108), (309 -4.7563), (310 -4.8018), (311 -4.8472), (312 -4.8927), (313 -4.9381), (314 -4.9836), (315 -5.0291), (316 -5.0745), (317 -5.12), (318 -5.1667), (319 -5.2164), (320 -5.266), (321 -5.3156), (322 -5.3636), (323 -5.4013), (324 -5.439), (325 -5.4752), (326 -5.4763), (327 -5.4774), (328 -5.4784), (329 -5.4795), (330 -5.467), (331 -5.4367), (332 -5.4065), (333 -5.3763), (334 -5.3461), (335 -5.3159), (336 -5.2856), (337 -5.2554), (338 -5.2252), (339 -5.1891), (340 -5.1419), (341 -5.0948), (342 -5.0476), (343 -5.0004), (344 -4.9532), (345 -4.906), (346 -4.8588), (347 -4.8117), (348 -4.7645), (349 -4.7173), (350 -4.6701), (351 -4.6172), (352 -4.5616), (353 -4.5061), (354 -4.4505), (355 -4.3949), (356 -4.3394), (357 -4.2838), (358 -4.2283), (359 -4.1727))";
    XmlRadiationPatternAdapter adapter = new XmlRadiationPatternAdapter();
    Map<Double, Double> pattern = adapter.unmarshal(v);
//    System.out.println("Text    " + v);
//    System.out.println("Map     " + pattern);
    String text = adapter.marshal(pattern);
//    System.out.println("Text    " + text);

    Assert.assertEquals(text, v);
  }

  @Test
  public void testMarshalUnsorted() throws Exception {
    XmlRadiationPatternAdapter adapter = new XmlRadiationPatternAdapter();
    /**
     * Create a map that retains insertion order an insert angles out of order
     */
    Map<Double, Double> pattern = new LinkedHashMap<>();
    pattern.put(90D, -10D);
    pattern.put(0D, 0D);
    pattern.put(270D, -10D);
    pattern.put(180D, -20D);
//    System.out.println("Text    " + v);
//    System.out.println("Map     " + pattern);
    String text = adapter.marshal(pattern);
//    System.out.println("Text    " + text);

    Assert.assertEquals("PATTERN ((0 0), (90 -10), (180 -20), (270 -10))", text);
  }

}
